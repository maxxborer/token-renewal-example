import {
  ApolloLink,
  FetchResult,
  Observable,
  Operation,
  NextLink,
} from '@apollo/client/core';
import { ErrorResponse } from '@apollo/client/link/error';
import { Subscription } from 'zen-observable-ts';
import { createLogger } from '@packages/simple-logger';

const logger = createLogger('apollo-token-renewal');

type ApolloTokenRenewalHandlers = {
  /** Callback –ø—Ä–∏ –Ω–∞—á–∞–ª–µ token refresh */
  start?: () => void;
  /** Callback –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º token refresh */
  success?: () => void;
  /** Callback –ø—Ä–∏ –æ—à–∏–±–∫–µ token refresh */
  failure?: (error: unknown) => void;
}

type ApolloTokenRenewalFlagKeys = {
  /** –ö–ª—é—á –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ */
  retry?: string;
  /** –ö–ª—é—á –¥–ª—è —Ñ–ª–∞–≥–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */
  skipAuth?: string;
}

export interface TokenRenewalConfig {
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ */
  refresh: () => Promise<boolean>;
  /** –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π */
  handlers: ApolloTokenRenewalHandlers;
  /** –ö–ª—é—á–∏ –¥–ª—è —Ñ–ª–∞–≥–æ–≤ */
  flagKeys: ApolloTokenRenewalFlagKeys;
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π */
  isAuthError?: (error: ErrorResponse) => boolean;
  /** –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å */
  silent?: boolean;
}

type PendingRequestCallback = (error?: unknown) => void;

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–∞—à–∏–º–∏ —Ñ–ª–∞–≥–∞–º–∏
interface ExtendedOperationContext extends Record<string, unknown> {
  fetchOptions?: {
    signal?: AbortSignal;
  };
}

const DEFAULT_CONFIG = {
  flagKeys: {
    retry: '_retry',
    skipAuth: '_skipAuth'
  },
  handlers: {
    start: () => { },
    success: () => { },
    failure: () => { },
  },
  isAuthError: (error) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º network error –Ω–∞ —Å—Ç–∞—Ç—É—Å 401
    const hasNetworkAuth = Boolean(error.networkError &&
      'statusCode' in error.networkError &&
      error.networkError.statusCode === 401);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º graphQLErrors –Ω–∞ UNAUTHENTICATED –æ—à–∏–±–∫—É
    const hasGraphQLAuth = error.graphQLErrors?.some(gqlError =>
      gqlError.extensions?.code === 'UNAUTHENTICATED' ||
      gqlError.message?.includes('Unauthorized') ||
      gqlError.message?.includes('UNAUTHENTICATED')
    ) || false;

    return hasNetworkAuth || hasGraphQLAuth;
  },
  silent: false
} as const satisfies Omit<TokenRenewalConfig, 'refresh'>;

export class TokenRenewalLink extends ApolloLink {
  private pendingRequests: PendingRequestCallback[] = [];
  private refreshPromise: Promise<void> | null = null;
  private config: DeepRequired<TokenRenewalConfig>;

  constructor(config: TokenRenewalConfig) {
    super();

    this.config = {
      ...DEFAULT_CONFIG, ...config,
      flagKeys: { ...DEFAULT_CONFIG.flagKeys, ...config.flagKeys },
      handlers: { ...DEFAULT_CONFIG.handlers, ...config.handlers }
    };
  }

  public request(operation: Operation, forward: NextLink): Observable<FetchResult> {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–º–µ—á–µ–Ω –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if (operation.getContext()[this.config.flagKeys.skipAuth]) {
      return forward(operation);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –¥–æ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const context = operation.getContext() as ExtendedOperationContext;
    const signal = context.fetchOptions?.signal;

    if (signal?.aborted) {
      return new Observable<FetchResult>((observer) => {
        observer.error(new Error('Request aborted'));
      });
    }

    return new Observable<FetchResult>((observer) => {
      let subscription: Subscription | null = null;

      // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
      const abortHandler = () => {
        if (subscription) {
          subscription.unsubscribe();
        }
        observer.error(new Error('Request aborted'));
      };

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã
      if (signal) {
        signal.addEventListener('abort', abortHandler);
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      const sub = forward(operation).subscribe({
        next: (value) => observer.next?.(value),
        error: (error) => {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º graphQLErrors –∏–∑ –æ—à–∏–±–∫–∏
          const graphQLErrors = error?.graphQLErrors || [];
          const networkError = error?.networkError || error;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          if (this.config.isAuthError({
            networkError,
            graphQLErrors,
            operation,
            forward
          })) {
            logger.info('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º auth –æ—à–∏–±–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º token renewal');
            if (graphQLErrors.length > 0) {
              logger.info(`üìã GraphQL –æ—à–∏–±–∫–∏: ${graphQLErrors.map((err: any) => err.message).join(', ')}`);
            }
            if (networkError) {
              logger.info(`üåê Network –æ—à–∏–±–∫–∞: ${networkError.message || networkError}`);
            }
            // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ Observable –∫–æ—Ç–æ—Ä—ã–π –∂–¥–µ—Ç refresh
            const authErrorObservable = this.handleAuthError({
              networkError,
              graphQLErrors,
              operation,
              forward
            });

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π Observable
            authErrorObservable.subscribe({
              next: (value) => observer.next?.(value),
              error: (err) => observer.error?.(err),
              complete: () => observer.complete?.()
            });
          } else {
            logger.error(`‚ùå –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ-auth –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ: ${error}`);
            // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ-auth –æ—à–∏–±–∫–∏
            observer.error?.(error);
          }
        },
        complete: () => observer.complete?.()
      });

      subscription = sub;

      return () => {
        if (signal) {
          signal.removeEventListener('abort', abortHandler);
        }
        if (subscription) {
          subscription.unsubscribe();
        }
      };
    });
  }

  private handleAuthError(
    errorResponse: ErrorResponse
  ): Observable<FetchResult> {
    const { operation, forward } = errorResponse;

    // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if (operation.getContext()[this.config.flagKeys.retry]) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Observable –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π
      return new Observable<FetchResult>((observer) => {
        observer.error(new Error('Authorization failed after retry'));
      });
    }

    // –°–æ–∑–¥–∞–µ–º Observable –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    return new Observable<FetchResult>((observer) => {
      const context = operation.getContext() as ExtendedOperationContext;
      const signal = context.fetchOptions?.signal;

      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–º–µ–Ω—ë–Ω
      if (signal?.aborted) {
        logger.info('‚èπÔ∏è –ó–∞–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω');
        observer.complete();
        return;
      }

      // –ï—Å–ª–∏ refresh –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
      if (!this.refreshPromise) {
        logger.info('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π refresh');
        this.refreshPromise = this.performTokenRefresh();
      } else {
        logger.info('‚è≥ Refresh —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º callback –≤ –æ—á–µ—Ä–µ–¥—å
      const callback: PendingRequestCallback = (error?: unknown) => {
        if (signal?.aborted) {
          logger.info('‚èπÔ∏è –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏');
          observer.complete();
          return;
        }

        if (error) {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ refresh, –ø–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É: ${error}`);
          observer.error(error);
          return;
        }

        logger.info('üîÑ Token refresh —É—Å–ø–µ—à–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å');
        // –ü–æ–º–µ—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä–Ω—É—é
        operation.setContext({
          ...operation.getContext(),
          [this.config.flagKeys.retry]: true
        });

        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        const subscription = forward(operation).subscribe({
          next: (value) => {
            logger.info('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω');
            observer.next(value);
          },
          error: (err) => {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ: ${err}`);
            observer.error(err);
          },
          complete: () => {
            logger.info('üèÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
            observer.complete();
          }
        });

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        if (signal) {
          signal.addEventListener('abort', () => {
            subscription.unsubscribe();
            observer.complete();
          });
        }
      };

      this.pendingRequests.push(callback);

      // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ Observable
      return () => {
        if (signal) {
          signal.removeEventListener('abort', () => { });
        }

        // –£–¥–∞–ª—è–µ–º callback –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        const index = this.pendingRequests.indexOf(callback);
        if (index !== -1) {
          this.pendingRequests.splice(index, 1);
        }
      };
    });
  }

  private async performTokenRefresh(): Promise<void> {
    try {
      logger.info('üîë –ù–∞—á–∏–Ω–∞–µ–º refresh —Ç–æ–∫–µ–Ω–∞');
      this.config.handlers.start?.();

      const success = await this.config.refresh();

      if (!success) {
        logger.error('Token refresh failed');
        const error = new Error('Token refresh failed');
        this.config.handlers.failure?.(error);
        throw error;
      }

      logger.info('‚úÖ Token refresh —É—Å–ø–µ—à–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å');
      this.config.handlers.success?.();

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      this.processPendingRequests();
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è refresh: ${error}`);
      this.config.handlers.failure?.(error);
      this.processPendingRequests(error);
      throw error;
    } finally {
      this.refreshPromise = null;
    }
  }

  private processPendingRequests(error?: unknown): void {
    const requests = [...this.pendingRequests];
    this.pendingRequests = [];

    logger.info(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${requests.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);
    requests.forEach(callback => callback(error));
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–¥–æ–±–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è link
export function createTokenRenewalLink(config: TokenRenewalConfig): TokenRenewalLink {
  return new TokenRenewalLink(config);
}

type DeepRequired<T> =
  // –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
  T extends (...args: any[]) => any ? T
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã –∏ –∫–æ—Ä—Ç–µ–∂–∏
  : T extends readonly [any, ...any[]] | readonly any[]
  ? { [K in keyof T]: DeepRequired<T[K]> }
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
  : T extends object
  ? { [K in keyof T]-?: DeepRequired<T[K]> }
  // –ü—Ä–∏–º–∏—Ç–∏–≤—ã –∏ –ø—Ä–æ—á–µ–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
  : T;
