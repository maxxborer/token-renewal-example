import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, InternalAxiosRequestConfig, AxiosResponse } from 'axios';
import { createLogger } from '@packages/simple-logger';

const logger = createLogger('axios-token-renewal');

type AxiosTokenRenewalHandlers = {
  /** Callback –ø—Ä–∏ –Ω–∞—á–∞–ª–µ token refresh */
  start?: () => void;
  /** Callback –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º token refresh */
  success?: () => void;
  /** Callback –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ */
  failure?: (error: unknown) => void;
}

type AxiosTokenRenewalFlagKeys = {
  /** –ö–ª—é—á –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ */
  retry?: string;
  /** –ö–ª—é—á –¥–ª—è —Ñ–ª–∞–≥–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */
  skipAuth?: string;
}

export interface TokenRenewalConfig {
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ */
  refresh: () => Promise<boolean>;
  /** –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π */
  handlers: AxiosTokenRenewalHandlers;
  /** –ö–ª—é—á–∏ –¥–ª—è —Ñ–ª–∞–≥–æ–≤ */
  flagKeys: AxiosTokenRenewalFlagKeys;
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π */
  isAuthError?: (error: AxiosError) => boolean;
  /** –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å */
  silent?: boolean;
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–∞—à–∏–º–∏ —Ñ–ª–∞–≥–∞–º–∏
interface ExtendedAxiosRequestConfig extends InternalAxiosRequestConfig {
  [key: string]: unknown; // –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
}

interface PendingRequest {
  resolve: (value: AxiosResponse | PromiseLike<AxiosResponse>) => void;
  reject: (reason: unknown) => void;
  config: AxiosRequestConfig;
}

const DEFAULT_CONFIG = {
  flagKeys: {
    retry: '_retry',
    skipAuth: '_skipAuth'
  },
  handlers: {
    start: () => {},
    success: () => {},
    failure: () => {}
  },
  isAuthError: (error) => Boolean(error.response?.status === 401),
  silent: false
} as const satisfies Omit<TokenRenewalConfig, 'refresh'>;

export class TokenRenewalInterceptor {
  private isRefreshing = false;
  private pendingRequests: PendingRequest[] = [];
  private config: DeepRequired<TokenRenewalConfig>;

  constructor(config: TokenRenewalConfig) {
    this.config = {
      ...DEFAULT_CONFIG, ...config,
      flagKeys: { ...DEFAULT_CONFIG.flagKeys, ...config.flagKeys },
      handlers: { ...DEFAULT_CONFIG.handlers, ...config.handlers }
    };
  }

  /**
   * @see https://axios-http.com/docs/interceptors
   * @description
   * 1. axios.interceptors.request.use(onFulfilled, onRejected) ‚Äî —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç *–ø–µ—Ä–µ–¥* fetch/XHR.
   *    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ config(–∏–ª–∏ Promise<config>).–ï—Å–ª–∏ –∫–∏–Ω–µ—Ç–µ –æ—à–∏–±–∫—É / Promise.reject, –∑–∞–ø—Ä–æ—Å –Ω–µ —É–π–¥—ë—Ç.
   * 2. axios.interceptors.response.use(onFulfilled, onRejected) ‚Äî —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç *–ø–æ—Å–ª–µ* –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.
   *    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ response(–∏–ª–∏ —á—Ç–æ - —Ç–æ –∏–Ω–æ–µ ‚Äî —Ç–æ–≥–¥–∞ –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ —ç—Ç–æ –∏ –ø–æ–ª—É—á–∏—Ç).–ë—Ä–æ—Å–∏—Ç–µ –æ—à–∏–±–∫—É ‚Äî –ø–æ–ª–µ—Ç–∏—Ç –≤ catch.
   *
   * –í –¥–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è response interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
   */
  public setupInterceptors(axiosInstance: AxiosInstance = axios): void {
    // Response interceptor
    axiosInstance.interceptors.response.use(
      (response) => response,
      async (error: AxiosError) => {
        const originalRequest = error.config as ExtendedAxiosRequestConfig;

        if (!originalRequest) {
          return Promise.reject(error);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const isAuthError = this.config.isAuthError(error);
        const isRetry = originalRequest[this.config.flagKeys.retry];
        const skipAuth = originalRequest[this.config.flagKeys.skipAuth];

        if (isAuthError && !isRetry && !skipAuth) {
          logger.info('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 401 –æ—à–∏–±–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º token renewal');
          return this.handleAuthError(originalRequest, axiosInstance);
        }

        logger.error(`–ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ: ${error.response?.status}`);
        return Promise.reject(error);
      }
    );
  }

  /**
   * @description
   * 1. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω, —Ç–æ –∫–∏–¥–∞–µ–º –æ—à–∏–±–∫—É.
   * 2. –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å.
   * 3. –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞.
   */
  private async handleAuthError(
    originalRequest: ExtendedAxiosRequestConfig,
    axiosInstance: AxiosInstance
  ): Promise<AxiosResponse> {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω
    if (originalRequest.signal?.aborted) {
      throw new Error('Request aborted');
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (this.isRefreshing) {
      logger.info('‚è≥ Refresh —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å');
      return this.queueRequest(originalRequest);
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    this.isRefreshing = true;
    originalRequest[this.config.flagKeys.retry] = true;

    try {
      logger.info('üîë –ù–∞—á–∏–Ω–∞–µ–º refresh —Ç–æ–∫–µ–Ω–∞');
      this.config.handlers.start?.();

      const success = await this.config.refresh();

      if (success) {
        originalRequest[this.config.flagKeys.retry] = true;
      }

      if (!success) {
        logger.error('Token refresh failed');
        const error = new Error('Token refresh failed');
        this.config.handlers.failure?.(error);
        throw error;
      }

      logger.info('‚úÖ Token refresh —É—Å–ø–µ—à–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å');
      this.config.handlers.success?.();

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      this.processPendingRequests(null, axiosInstance);
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è refresh –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∞: ${error}`);
      this.config.handlers.failure?.(error);
      this.processPendingRequests(error, axiosInstance);
      return Promise.reject(error);
    } finally {
      this.isRefreshing = false;
    }

    try {
      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      logger.info('üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
      const result = await axiosInstance(originalRequest);
      logger.info(`‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω: ${result.status}`);
      return result;
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–∞: ${error}`);
      return Promise.reject(error);
    }
  }

  private queueRequest(config: ExtendedAxiosRequestConfig): Promise<AxiosResponse> {
    return new Promise((resolve, reject) => {
      const request: PendingRequest = {
        resolve,
        reject,
        config
      };

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
      if (config.signal instanceof AbortSignal) {
        const abortHandler = () => {
          const index = this.pendingRequests.indexOf(request);
          if (index !== -1) {
            this.pendingRequests.splice(index, 1);
          }
          reject(new Error('Request aborted'));
        };
        config.signal.addEventListener('abort', abortHandler);
      }

      this.pendingRequests.push(request);
    });
  }

  private processPendingRequests(error: unknown, axiosInstance: AxiosInstance): void {
    const requests = [...this.pendingRequests];
    this.pendingRequests = [];

    logger.info(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${requests.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);

    requests.forEach(({ resolve, reject, config }) => {
      if (error) {
        logger.error('‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
        reject(error);
      } else {
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        const extendedConfig = config as ExtendedAxiosRequestConfig;
        extendedConfig[this.config.flagKeys.retry] = true;
        logger.info('üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏');
        axiosInstance(extendedConfig)
          .then((response) => {
            logger.info(`‚úÖ –ó–∞–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —É—Å–ø–µ—à–µ–Ω: ${response.status}`);
            resolve(response);
          })
          .catch((err) => {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: ${err}`);
            reject(err);
          });
      }
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–¥–æ–±–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
export function setupAxiosTokenRenewal(
  config: TokenRenewalConfig,
  axiosInstance: AxiosInstance = axios
): TokenRenewalInterceptor {
  const interceptor = new TokenRenewalInterceptor(config);
  interceptor.setupInterceptors(axiosInstance);
  return interceptor;
}

type DeepRequired<T> =
  // –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
  T extends (...args: any[]) => any ? T
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã –∏ –∫–æ—Ä—Ç–µ–∂–∏
  : T extends readonly [any, ...any[]] | readonly any[]
  ? { [K in keyof T]: DeepRequired<T[K]> }
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
  : T extends object
  ? { [K in keyof T]-?: DeepRequired<T[K]> }
  // –ü—Ä–∏–º–∏—Ç–∏–≤—ã –∏ –ø—Ä–æ—á–µ–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
  : T;
